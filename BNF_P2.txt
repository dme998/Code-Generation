Please ensure this uses only tokens detected in your P1, no exceptions. 
Note that some legal tokens will pass the scanner but will always lead 
to an error here as they are not part of this BNF.

<program> -> <vars> main <block>
<block>   -> begin <vars> <stats> end
<vars>    -> empty | data Identifier :=  Integer  ;  <vars> 
<expr>    -> <N> - <expr>  | <N>
<N>       -> <A> / <N> | <A> * <N> | <A>
<A>       -> <M> + <A> | <M>
<M>       -> * <M> |  <R>
<R>       -> ( <expr> ) | Identifier | Integer
<stats>   -> <stat>  <mStat>
<mStat>   -> empty |  <stat>  <mStat>
<stat>    -> <in> ;  | <out> ;  | <block> | <if> ;  | <loop> ;  | <assign> ; | <goto> ; | <label> ;
<in>      -> getter  Identifier  
<out>     -> outter <expr>
<if>      -> if [ <expr> <RO> <expr> ] then <stat>
<loop>    -> loop  [ <expr> <RO> <expr> ]  <stat>
<assign>  -> assign Identifier  := <expr>  
<RO>      -> =>  | =< |  ==  |   [ == ]  (three tokens)  | %
<label>   -> void Identifier
<goto>    -> proc Identifier

