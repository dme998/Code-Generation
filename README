Project:        Parser and Tree Builder (P2)
Description:    Parses token triplets after lexical analysis
Author:         Daniel Eggers <dme998@mail.umsl.edu>
Course:         Program Translation (CS4280-001)
Instructor:     Mark Hauschild
Date:           April 12, 2021 
Test System:    CentOS Linux 7 (Core)
Files:          main.cpp parser.cpp parser.h driveScanner.cpp driveScanner.h 
                scanner.cpp scanner.h ptree.h token.h
Produces:       tmp.fs (overwrites)


BNF Grammar used:
Uses only tokens detected in P1, no exceptions. 
Some legal tokens will pass the scanner but will always lead to an error here as they are not part of this BNF

<program> -> <vars> main <block>
<block>   -> begin <vars> <stats> end
<vars>    -> empty | data Identifier :=  Integer  ;  <vars> 
<expr>    -> <N> - <expr>  | <N>
<N>       -> <A> / <N> | <A> * <N> | <A>
<A>       -> <M> + <A> | <M>
<M>       -> * <M> |  <R>
<R>       -> ( <expr> ) | Identifier | Integer
<stats>   -> <stat>  <mStat>
<mStat>   -> empty |  <stat>  <mStat>
<stat>    -> <in> ;  | <out> ;  | <block> | <if> ;  | <loop> ;  | <assign> ; | <goto> ; | <label> ;
<in>      -> getter  Identifier  
<out>     -> outter <expr>
<if>      -> if [ <expr> <RO> <expr> ] then <stat>
<loop>    -> loop  [ <expr> <RO> <expr> ]  <stat>
<assign>  -> assign Identifier  := <expr>  
<RO>      -> =>  | =< |  ==  |   [ == ]  (three tokens)  | %
<label>   -> void Identifier
<goto>    -> proc Identifier

