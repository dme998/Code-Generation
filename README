Project:        Code Generation (P4)
Description:    Generates asm code after lexical analysis, parsing, and semantics analysis
Author:         Daniel Eggers <dme998@mail.umsl.edu>
Course:         Program Translation (CS4280-001)
Instructor:     Mark Hauschild
Date:           April May 8, 2021 
Test System:    CentOS Linux 7 (Core)
Files:          main.cpp parser.cpp parser.h driveScanner.cpp driveScanner.h 
                scanner.cpp scanner.h ptree.h token.h semantics.cpp semantics.h 
                compiler.cpp compiler.h
Produces:       kb.fs (overwrites), [file].asm (overwrites)

The assembly code is generated according to specification at <https://comp.umsl.edu/assembler/>.
This repository builds off of my scanner <https://github.com/dme998/Lexical-Analyzer>.

Invocation:
  compfs [file]
    file must have .fs extension
  compfs [no args]
    Prompts the user to enter stdin line-by-line to later be processed. Enter "stop" when done.
    The user input is written to temporary file "tmp.fs" and processed immediately after write.

Verbose Option:
  A global variable "const bool VERBOSE" is at the top of some source files, intended for debugging. 
  If set to TRUE, verbose statements are printed as the program runs its course.

Overview of functionality:
  This program lexically analyzes a file (tokens separated by whitespace) and loads tokens into vector.
  The vector is then processed by the parser to determine if syntax matches grammar (see below).
  The parser builds a tree of tokens to be traversed during code generation.
  The semantics analyzer checks proper declaration and use of variables (global scope only).
  ASM Code is written to target file with the same base filename as the input file.
  
Limitations: 
  if-statements, loops, %, and arithmetic operations are not implemented. 
    A warning is displayed if attempting to compile unsupported code. 
    If no warning is displayed, the compiled program is intended to work. 
  proc defines the identifier, void does not (i.e. proc must come before void).
  Variable scope is global-only.

Details of functionality:
  1. main() processes cmdl arguments.
     1a. if user specified file, then that file will be used.
     2a. if no file is specified, main() will process stdin until user enters "stop".
         The stdin is directed to a temporary file that will be processed by driver.
  3. driver reads from file and acts as a filter, building strings to be passed to scanner.
  4. scanner processes one string at a time and returns it as a token triplet:
     {id, instance, line}.
  5. driver pushes each token it receives from scanner into a globally-accessible vector.
  6. Parser performs recursive descent parsing on tokens vector until EOF token is received.
     If EOF isn't received, the parse fails.
     Parsing is done according to BNF grammar defined below.
  7. If VERBOSE flag is set in parser.cpp, tokens will be printed during recursive descent.
  8. The finished parse tree is passed back to main() and then printed in preorder traversal. 
  9. The parse tree is passed to semantics().
  10. The semantics analyzer sweeps identifiers into a symbol table vector and tags the ones that are declarations.
  11. The symbol table vector is checked for duplicate variable declarations.
  12. The symbol table vector is checked for undeclared variables.
  13. Target file is generated. First code translation is written, then storage allocation.
      Translation is done by traversing the parse tree and writing to target file during traversal. 


BNF Grammar used:
  <program> -> <vars> main <block>
  <block>   -> begin <vars> <stats> end
  <vars>    -> empty | data Identifier :=  Integer  ;  <vars> 
  <expr>    -> <N> - <expr>  | <N>
  <N>       -> <A> / <N> | <A> * <N> | <A>
  <A>       -> <M> + <A> | <M>
  <M>       -> * <M> |  <R>
  <R>       -> ( <expr> ) | Identifier | Integer
  <stats>   -> <stat>  <mStat>
  <mStat>   -> empty |  <stat>  <mStat>
  <stat>    -> <in> ;  | <out> ;  | <block> | <if> ;  | <loop> ;  | <assign> ; | <goto> ; | <label> ;
  <in>      -> getter  Identifier  
  <out>     -> outter <expr>
  <if>      -> if [ <expr> <RO> <expr> ] then <stat>
  <loop>    -> loop  [ <expr> <RO> <expr> ]  <stat>
  <assign>  -> assign Identifier  := <expr>  
  <RO>      -> =>  | =< |  ==  |   [ == ]  (three tokens)  | %
  <label>   -> void Identifier
  <goto>    -> proc Identifier

